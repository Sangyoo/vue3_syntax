<template>
  <h1 
    v-bind:[attr]="'active'"
    @[event]="add">
    {{ msg }}
  </h1>
  <!-- <h1 
    @click="add">
    {{ msg }}
  </h1>
  <h2
    v-once
    v-html="msg">
  </h2> -->
</template>

<script>
//v-once 일회용, 노반응성
//v-on:click = @click (약식표현)
export default {
  data() {
    return {
      msg: 'active',
      attr: 'class',
      event: 'click'
      //이중중괄호(mustache) 안의 내용이 아래와 같이 html문법일 경우
      //위의 template에 v-html이라는 속성을 추가해주어야 한다.
      // msg: '<div style="color: red;">Hello!!</div>'
    }
  },
  methods: {
    add() {
      this.msg += '!'
    }
  }
}
</script>

<style scoped>
  .active {
    color: royalblue;
    font-size: 100px;
  }
</style>
--------------------------------vue-클래스와바인딩-----------------------------------------------------
<template>
  <h1
    v-bind:class="{ active : isActive }"
    @click="activate">Hello?!({{ isActive }})</h1>
</template>

<script>
export default {
  data() {
    return {
      isActive: false
    }
  },
  methods: {
    activate() {
      this.isActive = true
    }
  }
}
</script>

<style scoped>
  .active{
    color:red;
    font-weight: bold;
  }
</style>
-------------------------------------------------------------------------------------
npm i -D shortid : 각 요소들의 id를 만들어주는 패키지
-------------------------------------------------------------------------------------
<template>
  <button @click="handler">
    Click me!
  </button>
  <ul>
    <li
      v-for="{fruit, index} in Fruits"
      v-bind:key="fruit">
      {{ fruit }} - {{ index }}</li>
  </ul>

  <ul>
    <li
      v-for="{id, name} in Fruits"
      v-bind:key="id">
      {{ name }} - {{ id }}</li>
  </ul>

  <ul>
    <li
      v-for="fruit in newFruits"
      v-bind:key="fruit.id">
      {{ fruit.name }} - {{ fruit.id }}
    </li>
  </ul>
</template>

<script>
//npm i -D shortid를 통해 패키지 설치함 : id생성해주는 패키지
import shortid from 'shortid'

export default {
  data() {
    return {
      fruits:['Apple', 'Banana','Cherry'],
      /*아래와 같은 결과가 아래의 computed로 인해 만들어진다
      newFruits: [
        { id: 0, name: 'Apple'},
        { id: 1, name: 'Banana'},
        { id: 2, name: 'Cherry'}
      ]*/
    }
  },
  methods: {
    handler(){
      this.fruits.push('Orange')
    }
  },
  computed:{
    newFruits(){
      return this.fruits.map(fruit => ({
        id: shortid.generate(), 
        name: fruit
      }))
    }
  }
}
</script>

<style scoped>

</style>
-------------------------------------------------------------------------------------

<template>
  <a
    href="https://naver.com"
    target="_blank"
    @click.prevent.once="handler">
    Naver
  </a>
</template>

<script>
/*
@click.prevent ="function" : html 기본동작을 실행하지않고 메소드만 실행
@click.once = "function": 메소드를 한번만 실행
@event.stopPropagation(): 이벤트의 전파를 방지한다. ex)자식 요소를 클릭했을 때
자식 요소를 포함하는 부모 요소는 클릭 판정을 받지 않게 해준다(이벤트 버블링 방지)
=>@click.stop="function" 과 같은 내용이다.
반대의 개념으로 이벤트 캡쳐링이 있다. 현재 이벤트의 함수를 실행하는 객체인 currentTarget과
내가 클릭하거나 작동한 실제 객체인 target이 일치할때만 실행하는 것이다.
*/

export default {
  data() {
    return {

    }
  },
  methods: {
    handler(event) {
      //preventDefault 주소 연결(기본html 기능)을 실행하지 않고 메소드만 실행하겠다.
      // event.preventDefault()
      console.log('ABC!')
    }
  },
  computed:{

  }
}
</script>

<style scoped>

</style>
-------------------------------------------------------------------------------------
